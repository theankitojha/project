name: CI/CD Pipeline

on:
  push:
    branches:
      - develop

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Build Docker image
        run: docker build -t myapp:${{ github.sha }} .

      - name: Scan Docker image
        run: |
          docker run --rm \
            -v /var/run/docker.sock:/var/run/docker.sock \
            aquasec/trivy:latest image --severity HIGH,CRITICAL myapp:${{ github.sha }}

      - name: Push Docker image to ECR
        run: |
          aws ecr get-login-password --region us-west-2 | docker login --username AWS --password-stdin 058264339609.dkr.ecr.us-west-2.amazonaws.com/my-app-repo-dev
          docker tag myapp:${{ github.sha }} 058264339609.dkr.ecr.us-west-2.amazonaws.com/my-app-repo-dev:${{ github.sha }}
          docker push 058264339609.dkr.ecr.us-west-2.amazonaws.com/my-app-repo-dev:${{ github.sha }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install or Update AWS CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y unzip curl
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install --update

      # - name: Set up Terraform
      #   uses: hashicorp/setup-terraform@v2
      #   with:
      #     terraform_version: 1.9.5

      # - name: Terraform Init
      #   run: terraform init
      #   working-directory: infra/terraform

      # - name: Terraform Apply
      #   run: terraform apply -auto-approve
      #   working-directory: infra/terraform
      #   env:
      #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Update ECS Service
        run: |
          aws ecs update-service --cluster my-ecs-cluster-dev --service my-app-service-dev --force-new-deployment
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Verify Deployment
        run: |
          aws ecs describe-services --cluster my-ecs-cluster-dev --services my-app-service-dev
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
